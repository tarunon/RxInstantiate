import Instantiate
import RxSwift
import RxCocoa
import RxDataSources
import EnumConvertible

%{
    def join(xs, j=", "):
        return j.join(xs)
    def enumerateC(n):
        return join(["C{}".format(i) for i in range(n)])
    def enumerateArgsDef(n):
        return join(["type{}: C{}.Type".format(i, i) for i in range(n)], ", _ ")
    def enumerateArgs(n):
        return join(["type{}".format(i) for i in range(n)])
    enumNumbers = range(2, int(MAX_SERIAL_NUMBER) + 1)
    if len(SPECIFIC_NUMBERS) > 0:
        enumNumbers += [int(s) for s in SPECIFIC_NUMBERS.split(',')]
    viewTypes = ["Table", "Collection"]
    renderTypes = [("Reload", ""), ("Animated", "Animatable")]
}%

% for viewType in viewTypes:
extension Reactive where Base: UI${viewType}View {
    % if viewType == "Collection":
    private func configureHeaderFooter<X>()
        -> (X, UICollectionView, String, IndexPath)
        -> UICollectionReusableView
    {
        return { (_, collectionView, _, _) in
            return UICollectionViewEmptyHeaderFooter()
        }
    }
    % end
    % for enumNumber in enumNumbers:
    private func configureCell<${enumerateC(enumNumber)}, X, E>(for ${enumerateArgsDef(enumNumber)})
        -> (X, UI${viewType}View, IndexPath, E)
        -> UI${viewType}ViewCell
        where E: Enum${enumNumber}Convertible
        % for caseNumber in range(enumNumber):
        , C${caseNumber}: Reusable
        , C${caseNumber}: UI${viewType}ViewCell
        , E.T${caseNumber} == C${caseNumber}.Dependency
        % end
    {
        return { (_, ${viewType.lower()}View, indexPath, item) in
            switch item.asEnum() {
        % for caseNumber in range(enumNumber):
            case .case${caseNumber}(let x): return C${caseNumber}.dequeue(from: ${viewType.lower()}View, for: indexPath, with: x)
        % end
            }
        }
    }

        % for renderType in renderTypes:
    /**
     Binds sequences of elements to ${viewType.lower()} view rows using a custom reactive data used to perform the transformation.
     This method will make data source and retain it for as long as the subscription isn't disposed (result `Disposable` being disposed).
     In case `source` observable sequence terminates successfully, the data source will present latest element until the subscription isn't disposed.
     - parameters type: The reusable cell types that should be implemented `Reusable`, and `Dependency` should be equal to `SectionModel.Item.Tn`.
     - parameters source: Observable sequence of items. The data source item should be implemented `EnumNConvertible`.
     - parameters configureDataSource: Transform generated data source.
     - returns: Disposable object that ca be used to unbind.
     
     Example
     ```
        let items = Observable.just([
            ${renderType[1]}SectionModel(model: "First section", items: [
                Item.int(1.0),
                Item.int(2.0),
                Item.int(3.0)
                ]),
            ${renderType[1]}SectionModel(model: "Second section", items: [
                Item.string("a"),
                Item.string("b"),
                Item.string("c")
                ])
            ])
        items
            .bind(to: ${viewType.lower()}View.rx.items(.${renderType[0].lower()}, for: Cell0.self, Cell1.self, ...)) { (dataSource) in
                // dataSource configuration
            }
            .disposed(by: disposeBag)
     ```
     */
    public func items<${enumerateC(enumNumber)}, S, O>(_ updateMethod: DataSourceUpdateMethod.${renderType[0]}, for ${enumerateArgsDef(enumNumber)})
        -> (_ source: O)
        -> (_ configureDataSource: @escaping (Rx${viewType}ViewSectioned${renderType[0]}DataSource<S>) -> ())
        -> Disposable
        where S: ${renderType[1]}SectionModelType
        , O: ObservableType
        , O.E == [S]
        , S.Item: Enum${enumNumber}Convertible
            % for caseNumber in range(enumNumber):
        , C${caseNumber}: Reusable
        , C${caseNumber}: UI${viewType}ViewCell
        , S.Item.T${caseNumber} == C${caseNumber}.Dependency
            % end
    {
        return { (source) in
            { (configureDataSources) in
                % if viewType == "Collection":
                let dataSource = Rx${viewType}ViewSectioned${renderType[0]}DataSource<S>(configureCell: self.configureCell(for: ${enumerateArgs(enumNumber)}), configureSupplementaryView: self.configureHeaderFooter())
                % elif viewType == "Table":
                let dataSource = Rx${viewType}ViewSectioned${renderType[0]}DataSource<S>(configureCell: self.configureCell(for: ${enumerateArgs(enumNumber)}))
                % end
                configureDataSources(dataSource)
                return source
                    .bind(to: self.items(dataSource: dataSource))
            }
        }
    }

    /**
     Binds sequences of elements to ${viewType.lower()} view rows using a custom reactive data used to perform the transformation.
     This method will make data source and retain it for as long as the subscription isn't disposed (result `Disposable` being disposed).
     In case `source` observable sequence terminates successfully, the data source will present latest element until the subscription isn't disposed.
     - parameters type: The reusable cell types that should be implemented `Reusable`, and `Dependency` should be equal to `SectionModel.Item.Tn`.
     - parameters source: Observable sequence of items. The data source item should be implemented `EnumNConvertible`.
     - returns: Disposable object that ca be used to unbind.
     
     Example
     ```
        let items = Observable.just([
            ${renderType[1]}SectionModel(model: "First section", items: [
                Item.int(1.0),
                Item.int(2.0),
                Item.int(3.0)
                ]),
            ${renderType[1]}SectionModel(model: "Second section", items: [
                Item.string("a"),
                Item.string("b"),
                Item.string("c")
                ])
            ])
        items
            .bind(to: ${viewType.lower()}View.rx.items(.${renderType[0].lower()}, for: Cell0.self, Cell1.self, ...))
            .disposed(by: disposeBag)
     ```
     */
    public func items<${enumerateC(enumNumber)}, S, O>(_ updateMethod: DataSourceUpdateMethod.${renderType[0]}, for ${enumerateArgsDef(enumNumber)})
        -> (_ source: O)
        -> Disposable
        where S: ${renderType[1]}SectionModelType
        , O: ObservableType
        , O.E == [S]
        , S.Item: Enum${enumNumber}Convertible
            % for caseNumber in range(enumNumber):
        , C${caseNumber}: Reusable
        , C${caseNumber}: UI${viewType}ViewCell
        , S.Item.T${caseNumber} == C${caseNumber}.Dependency
            % end
    {
        return { self.items(updateMethod, for: ${enumerateArgs(enumNumber)})($0)({ _ in }) }
    }

        %end
    % end
}

% end
